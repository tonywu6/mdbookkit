---
source: crates/rustdoc-link/tests/lib.rs
expression: output
---
# mdbook-rustdoc-link

**[_rustdoc_-style linking][rustdoc] for [mdBook]** (with the help of [rust-analyzer]).

You write:

```md
The [`option`][std::option] and [`result`][std::result] modules define optional and
error-handling types, [`Option<T>`] and [`Result<T, E>`]. The [`iter`][std::iter] module
defines Rust's iterator trait, [`Iterator`], which works with the `for` loop to access
collections. [^1]
```

You get:

<figure class="fig-text">

The [`option`](https://doc.rust-lang.org/stable/core/option/index.html "std::option") and [`result`](https://doc.rust-lang.org/stable/core/result/index.html "std::result") modules define optional and
error-handling types, [`Option<T>`](https://doc.rust-lang.org/stable/core/option/enum.Option.html "Option<T>") and [`Result<T, E>`](https://doc.rust-lang.org/stable/core/result/enum.Result.html "Result<T, E>"). The [`iter`](https://doc.rust-lang.org/stable/core/iter/index.html "std::iter") module
defines Rust's iterator trait, [`Iterator`](https://doc.rust-lang.org/stable/core/iter/traits/iterator/trait.Iterator.html "Iterator"), which works with the `for` loop to access
collections. [^1]

</figure>

## Getting started

You will need to:

1. Have [rust-analyzer]:

   - If you already use the [VS Code extension][ra-extension], this project will
     automatically use the server binary that comes with it, no extra setup is needed!
   - Otherwise, [install][ra-install] rust-analyzer (e.g. via `rustup`) and make sure
     it's on your `PATH`.

2. Install this project:

   ```
   cargo install mdbook-rustdoc-link
   ```

3. Configure your `book.toml` to use it as a [preprocessor]:

   ```toml
   [book]
   title = "My Book"

   [preprocessor.rustdoc-link]
   # mdBook will run `mdbook-rustdoc-link`
   after = ["links"]
   # recommended, so that it can see content from {{#include}} as well
   ```

Now, when you want to link to a Rust item, such as a type, a function, etc., simply use
its name in place of a URL, like this:

```md
Like [`std::thread::spawn`], [`tokio::task::spawn`] returns a
[`JoinHandle`][tokio::task::JoinHandle] struct.
```

`mdbook-rustdoc-link` will then turn them into hyperlinks:

<figure class="fig-text">

Like [`std::thread::spawn`](https://doc.rust-lang.org/stable/std/thread/fn.spawn.html "std::thread::spawn"), [`tokio::task::spawn`](https://docs.rs/tokio/1.44.1/tokio/task/spawn/fn.spawn.html "tokio::task::spawn") returns a
[`JoinHandle`](https://docs.rs/tokio/1.44.1/tokio/runtime/task/join/struct.JoinHandle.html "tokio::task::JoinHandle") struct.

</figure>

This works in both `mdbook build` and `mdbook serve`!

![screen recording of mdbook-rustdoc-link during mdbook build](rustdoc-link/media/screencap.webp)

> [!IMPORTANT]
>
> It is assumed that you are running `mdbook` within a Cargo project.
>
> If you are working on a crate, and your book directory is within your source tree,
> such as next to `Cargo.toml`, then running `mdbook` from there will "just work".
>
> If your book doesn't belong to a Cargo project, refer to
> [Workspace layout](rustdoc-link/workspace-layout.md) for more information on how you
> can setup up the preprocessor.

> [!TIP]
>
> `mdbook-rustdoc-link` makes use of rust-analyzer's ["Open Docs"][open-docs] feature,
> which resolves links to documentation given a symbol.
>
> Items from `std` will generate links to <https://doc.rust-lang.org>, while items from
> third-party crates will generate links to <https://docs.rs>.
>
> So really, rust-analyzer is doing the heavy-lifting here. This crate is just the glue
> code :)

## Overview

## License

---

[^1]: Text adapted from [<cite>A Tour of The Rust Standard Library</cite>][tour]

<!-- prettier-ignore-start -->

[mdBook]: https://rust-lang.github.io/mdBook/
[open-docs]: https://rust-analyzer.github.io/book/features.html#open-docs
[preprocessor]: https://rust-lang.github.io/mdBook/format/configuration/preprocessors.html
[ra-extension]: https://marketplace.visualstudio.com/items?itemName=rust-lang.rust-analyzer
[ra-install]: https://rust-analyzer.github.io/book/rust_analyzer_binary.html
[rust-analyzer]: https://rust-analyzer.github.io/
[rustdoc]: https://doc.rust-lang.org/rustdoc/write-documentation/linking-to-items-by-name.html
[tour]: https://doc.rust-lang.org/stable/std/#a-tour-of-the-rust-standard-library

<!-- prettier-ignore-end -->
