---
source: crates/rustdoc-link/tests/lib.rs
expression: report
---
  info: successfully resolved all links
   ╭─[supported-syntax:5:21]
 4 │ 
 5 │ Most of the formats [supported by rustdoc][rustdoc-linking] are supported.
   ·                     ───────────────────┬───────────────────
   ·                                        ╰── https://doc.rust-lang.org/rustdoc/write-documentation/linking-to-items-by-name.html
 6 │ Unsupported syntax and differences in behavior are emphasized below.
   ╰────
     ╭─[supported-syntax:17:3]
  16 │ 
  17 │ - [Types, modules, and associated items](#types-modules-and-associated-items)
     ·   ─────────────────────────────────────┬─────────────────────────────────────
     ·                                        ╰── #types-modules-and-associated-items
  18 │ - [Generic parameters](#generic-parameters)
     ·   ────────────────────┬────────────────────
     ·                       ╰── #generic-parameters
  19 │ - [Functions and macros](#functions-and-macros)
     ·   ──────────────────────┬──────────────────────
     ·                         ╰── #functions-and-macros
  20 │ - [Implementors and fully qualified syntax](#implementors-and-fully-qualified-syntax)
     ·   ─────────────────────────────────────────┬─────────────────────────────────────────
     ·                                            ╰── #implementors-and-fully-qualified-syntax
  21 │ - [Disambiguators](#disambiguators)
     ·   ────────────────┬────────────────
     ·                   ╰── #disambiguators
  22 │ - [Special types](#special-types)
     ·   ───────────────┬───────────────
     ·                  ╰── #special-types
  23 │ - [Markdown link syntax](#markdown-link-syntax)
     ·   ──────────────────────┬──────────────────────
     ·                         ╰── #markdown-link-syntax
  24 │ - [Linking to subheadings](#linking-to-subheadings)
     ·   ────────────────────────┬────────────────────────
     ·                           ╰── #linking-to-subheadings
  25 │ 
  26 │ </details>
  27 │ 
  28 │ ## Types, modules, and associated items
  29 │ 
  30 │ > ```md
  31 │ > Module [`alloc`][std::alloc] — Memory allocation APIs.
  32 │ > ```
  33 │ >
  34 │ > Module [`alloc`][std::alloc] — Memory allocation APIs.
     ·          ──────────┬──────────
     ·                    ╰── https://doc.rust-lang.org/stable/std/alloc/index.html
  35 │ >
  36 │ > ```md
  37 │ > Every [`Option`] is either [`Some`][Option::Some][^1] and contains a value, or
  38 │ > [`None`][Option::None][^1], and does not.
  39 │ > ```
  40 │ >
  41 │ > Every [`Option`] is either [`Some`][Option::Some][^1] and contains a value, or
     ·         ─────┬────           ───────────┬──────────
     ·              │                          ╰── https://doc.rust-lang.org/stable/core/option/enum.Option.html#variant.Some
     ·              ╰── https://doc.rust-lang.org/stable/core/option/enum.Option.html
  42 │ > [`None`][Option::None][^1], and does not.
     ·   ───────────┬──────────
     ·              ╰── https://doc.rust-lang.org/stable/core/option/enum.Option.html#variant.None
  43 │ >
  44 │ > ```md
  45 │ > [`Ipv4Addr::LOCALHOST`][core::net::Ipv4Addr::LOCALHOST] — An IPv4 address with
  46 │ > the address pointing to localhost: `127.0.0.1`.
  47 │ > ```
  48 │ >
  49 │ > [`Ipv4Addr::LOCALHOST`][core::net::Ipv4Addr::LOCALHOST] — An IPv4 address with
     ·   ───────────────────────────┬───────────────────────────
     ·                              ╰── https://doc.rust-lang.org/stable/core/net/ip_addr/struct.Ipv4Addr.html#associatedconstant.LOCALHOST
  50 │ > the address pointing to localhost: `127.0.0.1`.
  51 │ 
  52 │ ## Generic parameters
  53 │ 
  54 │ Types can contain generic parameters. This is _compatible_ with rustdoc.
  55 │ 
  56 │ > ```md
  57 │ > [`Vec<T>`] — A heap-allocated _vector_ that is resizable at runtime.
  58 │ > ```
  59 │ >
  60 │ > [`Vec<T>`] — A heap-allocated _vector_ that is resizable at runtime.
     ·   ─────┬────
     ·        ╰── https://doc.rust-lang.org/stable/alloc/vec/struct.Vec.html
  61 │ >
  62 │ > ```md
  63 │ > | Phantom type                                       | variance of `T`   |
  64 │ > | :------------------------------------------------- | :---------------- |
  65 │ > | [`&'a mut T`][std::marker::PhantomData<&'a mut T>] | **inv**ariant     |
  66 │ > | [`fn(T)`][std::marker::PhantomData<fn(T)>]         | **contra**variant |
  67 │ > ```
  68 │ >
  69 │ > | Phantom type                                       | variance of `T`   |
  70 │ > | :------------------------------------------------- | :---------------- |
  71 │ > | [`&'a mut T`][std::marker::PhantomData<&'a mut T>] | **inv**ariant     |
     ·     ─────────────────────────┬────────────────────────
     ·                              ╰── https://doc.rust-lang.org/stable/core/marker/struct.PhantomData.html
  72 │ > | [`fn(T)`][std::marker::PhantomData<fn(T)>]         | **contra**variant |
     ·     ─────────────────────┬────────────────────
     ·                          ╰── https://doc.rust-lang.org/stable/core/marker/struct.PhantomData.html
  73 │ 
  74 │ This includes if you use turbofish:
  75 │ 
  76 │ > ```md
  77 │ > `collect()` is one of the few times you’ll see the syntax affectionately known
  78 │ > as the "turbofish", for example: [`Iterator::collect::<Vec<i32>>()`].
  79 │ > ```
  80 │ >
  81 │ > `collect()` is one of the few times you’ll see the syntax affectionately known
  82 │ > as the "turbofish", for example: [`Iterator::collect::<Vec<i32>>()`].
     ·                                    ─────────────────┬─────────────────
     ·                                                     ╰── https://doc.rust-lang.org/stable/core/iter/traits/iterator/trait.Iterator.html#method.collect
  83 │ 
  84 │ ## Functions and macros
  85 │ 
  86 │ To indicate that an item is a function, add `()` after the function name. To
  87 │ indicate that an item is a macro, add `!` after the macro name, optionally
  88 │ followed by `()`, `[]`, or `{}`. This is _compatible_ with rustdoc.
  89 │ 
  90 │ Note that there cannot be arguments within `()`, `[]`, or `{}`.
  91 │ 
  92 │ > ```md
  93 │ > [`vec!`][std::vec!][^2] is different from [`vec`][std::vec], and don't
  94 │ > accidentally use [`format()`][std::fmt::format()] in place of
  95 │ > [`format!()`][std::format!()][^2]!
  96 │ > ```
  97 │ >
  98 │ > [`vec!`][std::vec!][^2] is different from [`vec`][std::vec], and don't
     ·   ─────────┬─────────                       ────────┬────────
     ·            │                                        ╰── https://doc.rust-lang.org/stable/alloc/vec/index.html
     ·            ╰── https://doc.rust-lang.org/stable/alloc/macros/macro.vec.html
  99 │ > accidentally use [`format()`][std::fmt::format()] in place of
     ·                    ────────────────┬───────────────
     ·                                    ╰── https://doc.rust-lang.org/stable/alloc/fmt/fn.format.html
 100 │ > [`format!()`][std::format!()][^2]!
     ·   ──────────────┬──────────────
     ·                 ╰── https://doc.rust-lang.org/stable/alloc/macros/macro.format.html
 101 │ 
 102 │ The macro syntax works for attribute and derive macros as well (even though this
 103 │ is not how they are invoked).
 104 │ 
 105 │ > ```md
 106 │ > There is a [derive macro][serde::Serialize!] to generate implementations of
 107 │ > the [`Serialize`][serde::Serialize] trait.
 108 │ > ```
 109 │ >
 110 │ > There is a [derive macro][serde::Serialize!] to generate implementations of
     ·              ────────────────┬────────────────
     ·                              ╰── https://docs.rs/serde_derive/1.0.219/serde_derive/derive.Serialize.html
 111 │ > the [`Serialize`][serde::Serialize] trait.
     ·       ───────────────┬───────────────
     ·                      ╰── https://docs.rs/serde/1.0.219/serde/ser/trait.Serialize.html
 112 │ 
 113 │ ## Implementors and fully qualified syntax
 114 │ 
 115 │ Trait implementors may supply additional documentation about their
 116 │ implementations. To link to implemented items instead of the traits themselves,
 117 │ use fully qualified paths, including `<... as Trait>` if necessary. This is a
 118 │ _new feature_ that rustdoc does not currently support.
 119 │ 
 120 │ > ```md
 121 │ > [`Result<T, E>`] implements [`IntoIterator`]; its
 122 │ > [**`into_iter()`**][Result::<(), ()>::into_iter] returns an iterator that
 123 │ > yields one value if the result is [`Result::Ok`], otherwise none.
 124 │ >
 125 │ > [`Vec<T>`] also implements [`IntoIterator`]; a vector cannot be used after you
 126 │ > call [**`into_iter()`**][<Vec<()> as IntoIterator>::into_iter].
 127 │ > ```
 128 │ >
 129 │ > [`Result<T, E>`] implements [`IntoIterator`]; its
     ·   ────────┬───────            ────────┬───────
     ·           │                           ╰── https://doc.rust-lang.org/stable/core/iter/traits/collect/trait.IntoIterator.html
     ·           ╰── https://doc.rust-lang.org/stable/core/result/enum.Result.html
 130 │ > [**`into_iter()`**][Result::<(), ()>::into_iter] returns an iterator that
     ·   ────────────────────────┬───────────────────────
     ·                           ╰── https://doc.rust-lang.org/stable/core/result/enum.Result.html#method.into_iter
 131 │ > yields one value if the result is [`Result::Ok`], otherwise none.
     ·                                     ───────┬──────
     ·                                            ╰── https://doc.rust-lang.org/stable/core/result/enum.Result.html#variant.Ok
 132 │ >
 133 │ > [`Vec<T>`] also implements [`IntoIterator`]; a vector cannot be used after you
     ·   ─────┬────                 ────────┬───────
     ·        │                             ╰── https://doc.rust-lang.org/stable/core/iter/traits/collect/trait.IntoIterator.html
     ·        ╰── https://doc.rust-lang.org/stable/alloc/vec/struct.Vec.html
 134 │ > call [**`into_iter()`**][<Vec<()> as IntoIterator>::into_iter].
     ·        ────────────────────────────┬────────────────────────────
     ·                                    ╰── https://doc.rust-lang.org/stable/alloc/vec/struct.Vec.html#method.into_iter
 135 │ 
 136 │ > [!NOTE]
     ·   ───┬───
     ·      ╰── !NOTE
 137 │ >
 138 │ > If your type has generic parameters, you must supply concrete types for them
 139 │ > for rust-analyzer to be able to locate an implementation. That is,
 140 │ > `Result<T, E>` won't work, but `Result<(), ()>` will (unless there happen to
 141 │ > be types `T` and `E` literally in scope).
 142 │ 
 143 │ ## Disambiguators
 144 │ 
 145 │ rustdoc's [disambiguator syntax][disambiguator] `prefix@name` is **accepted but
     ·           ──────────────────┬──────────────────
     ·                             ╰── https://doc.rust-lang.org/rustdoc/write-documentation/linking-to-items-by-name.html#namespaces-and-disambiguators
 146 │ ignored**:
 147 │ 
 148 │ > ```md
 149 │ > [`std::vec`], [`mod@std::vec`], and [`macro@std::vec`] all link to the `vec`
 150 │ > _module_.
 151 │ > ```
 152 │ >
 153 │ > [`std::vec`], [`mod@std::vec`], and [`macro@std::vec`] all link to the `vec` >
     ·   ──────┬─────  ────────┬───────      ─────────┬────────
     ·         │               │                      ╰── https://doc.rust-lang.org/stable/alloc/vec/index.html
     ·         │               ╰── https://doc.rust-lang.org/stable/alloc/vec/index.html
     ·         ╰── https://doc.rust-lang.org/stable/alloc/vec/index.html
 154 │ > _module_.
 155 │ 
 156 │ Currently, duplicate names in Rust are allowed only if they correspond to items
 157 │ in different [namespaces], for example, between macros and modules, and between
     ·              ──────┬─────
     ·                    ╰── https://doc.rust-lang.org/reference/names/namespaces.html
 158 │ struct fields and methods. This is mostly covered by the function and macro
 159 │ syntax, described [above](#functions-and-macros).
     ·                   ───────────────┬──────────────
     ·                                  ╰── #functions-and-macros
 160 │ 
 161 │ If you encounter items that must be disambiguated using rustdoc's disambiguator
 162 │ syntax, other than [the "special types" listed below](#special-types), please
     ·                    ─────────────────────────┬────────────────────────
     ·                                             ╰── #special-types
 163 │ [file an issue][issues]!
     · ───────────┬───────────
     ·            ╰── https://github.com/tonywu6/mdbookkit/issues
 164 │ 
 165 │ [disambiguator]:
 166 │   https://doc.rust-lang.org/rustdoc/write-documentation/linking-to-items-by-name.html#namespaces-and-disambiguators
 167 │ [namespaces]: https://doc.rust-lang.org/reference/names/namespaces.html
 168 │ [issues]: https://github.com/tonywu6/mdbookkit/issues
 169 │ 
 170 │ ## Special types
 171 │ 
 172 │ As of `rust-analyzer 2025-03-17`, there is **very limited support** on many
 173 │ [built-in types][rust-types]:
     · ──────────────┬─────────────
     ·               ╰── https://doc.rust-lang.org/reference/types.html#r-type.kinds
 174 │ 
 175 │ **Primitive types**:
 176 │ 
 177 │ Links to named primitive types are resolved:
 178 │ 
 179 │ > ```md
 180 │ > [`bool`], [`u8`], [`str`], and [`char`]
 181 │ > ```
 182 │ >
 183 │ > [`bool`], [`u8`], [`str`], and [`char`].
     ·   ────┬───  ───┬──  ───┬───      ────┬───
     ·       │        │       │             ╰── https://doc.rust-lang.org/nightly/core/primitive.char.html
     ·       │        │       ╰── https://doc.rust-lang.org/nightly/core/primitive.str.html
     ·       │        ╰── https://doc.rust-lang.org/nightly/core/primitive.u8.html
     ·       ╰── https://doc.rust-lang.org/nightly/core/primitive.bool.html
 184 │ 
     ╰────
     ╭─[supported-syntax:215:3]
 214 │ >
 215 │ > [The Option type](std::option::Option)
     ·   ───────────────────┬──────────────────
     ·                      ╰── https://doc.rust-lang.org/stable/core/option/enum.Option.html
 216 │ 
 217 │ Linking with reusable references:
 218 │ 
 219 │ > ```md
 220 │ > [The Option type][option-type]
 221 │ >
 222 │ > [option-type]: std::option::Option
 223 │ > ```
 224 │ >
 225 │ > [The Option type][option-type]
     ·   ───────────────┬──────────────
     ·                  ╰── option-type
 226 │ 
 227 │ Reference-style links `[text][id]` without a corresponding `[id]: name` part
 228 │ will be treated the same as inline-style links `[text](id)`:
 229 │ 
 230 │ > ```md
 231 │ > [The Option type][std::option::Option]
 232 │ > ```
 233 │ >
 234 │ > [The Option type][std::option::Option]
     ·   ───────────────────┬──────────────────
     ·                      ╰── https://doc.rust-lang.org/stable/core/option/enum.Option.html
 235 │ 
 236 │ Shortcuts are supported, and can contain inline markups:
 237 │ 
 238 │ > ```md
 239 │ > You can create a [`Vec`] with [**`Vec::new`**], or by using the [_`vec!`_][^2]
 240 │ > macro.
 241 │ > ```
 242 │ >
 243 │ > You can create a [`Vec`] with [**`Vec::new`**], or by using the [_`vec!`_][^2]
     ·                    ───┬───      ────────┬───────                  ─────┬────
     ·                       │                 │                              ╰── https://doc.rust-lang.org/stable/alloc/macros/macro.vec.html
     ·                       │                 ╰── https://doc.rust-lang.org/stable/alloc/vec/struct.Vec.html#method.new
     ·                       ╰── https://doc.rust-lang.org/stable/alloc/vec/struct.Vec.html
 244 │ > macro.
 245 │ 
 246 │ (The items must still be resolvable; in this case `Vec` and `vec!` come from the
 247 │ prelude.)
 248 │ 
 249 │ ## Linking to subheadings
 250 │ 
 251 │ ---
 252 │ 
 253 │ [^1]:
 254 │     rust-analyzer's ability to generate links for enum variants like
 255 │     `Option::Some` was improved only somewhat recently: before
 256 │     [#19246](https://github.com/rust-lang/rust-analyzer/pull/19246), links for
     ·     ───────────────────────────────┬───────────────────────────────
     ·                                    ╰── https://github.com/rust-lang/rust-analyzer/pull/19246
 257 │     variants and associated items may only point to the types themselves. If
 258 │     linking to such items doesn't seem to work for you, be sure to upgrade to a
 259 │     newer rust-analyzer first!
 260 │ 
 261 │ [^2]:
 262 │     As of rust-analyzer <ra-version>(version)</ra-version>, links generated for
 263 │     re-exported items don't always work. This happens often with macros.
 264 │     Examples include [`std::format!`] (seen above) and [`tokio::main!`]. For
     ·                      ────────┬───────                  ────────┬───────
     ·                              │                                 ╰── https://docs.rs/tokio-macros/2.5.0/tokio_macros/macro.main.html
     ·                              ╰── https://doc.rust-lang.org/stable/alloc/macros/macro.format.html
 265 │     more info, see [Caveats](caveats.md#re-exported-items).
     ·                    ───────────────────┬───────────────────
     ·                                       ╰── caveats.md#re-exported-items
     ╰────
